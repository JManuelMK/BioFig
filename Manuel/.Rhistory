dan = "gatcccgat"
dan[1]
dan = gatcccgat
dan = c("gatcccgat", "gggcccgg")
dan[1]
length(dan)
?length
help("length")
help("nrow")
?count
?count.fields
count.fields(dan)
q()
seq = "ACTG"
?type
typeof(seq)
length(seq)
seq = "A"
length(seq)
seq = "ACTG"
seq <- toString(seq)
typeof(seq)
class(seq)
length(seq)
seq
seq = "ACTG"
seq
?toString
x <- c("a", "b", "aaaaaaaaaaa")
x
length(x)
typeof(x)
toString(x)
length(x)
x <- toString(x)
length(x)
toString(x, width = 8)
length(x)
library(nichenetr)
make_heatmap_ggplot
library(CellChat)
g4 <- graph( c("John", "Jim", "Jim", "Jack", "Jim", "Jack", "John", "John"),
isolates=c("Jesse", "Janis", "Jennifer", "Justin") )
library(igraph)
g4 <- graph( c("John", "Jim", "Jim", "Jack", "Jim", "Jack", "John", "John"),
isolates=c("Jesse", "Janis", "Jennifer", "Justin") )
View(g4)
g
g4
V(g4)
E(g4)
g4[]
V(g4)$gender <- c("male", "male", "male", "male", "female", "female", "male")
E(g4)$type <- "email" # Edge attribute, assign "email" to all edges
E(g4)$weight <- 10    # Edge weight, setting all existing edges to 10
g4[]
links <- data.frame(
source=c("A","A", "A", "A", "A","J", "B", "B", "C", "C", "D","I"),
target=c("B","B", "C", "D", "J","A","E", "F", "G", "H", "I","I"),
importance=(sample(1:4, 12, replace=T))
)
nodes <- data.frame(
name=LETTERS[1:10],
carac=c( rep("young",3),rep("adult",2), rep("old",5))
)
View(links)
View(nodes)
network <- graph_from_data_frame(d=links, vertices=nodes, directed=F)
View(network)
plot(network)
library(igraph)
?%v%
library(magrittr)
?%v%
# root URL
r = "https://raw.githubusercontent.com/briatte/ggnet/master/"
# read nodes
v = read.csv(paste0(r, "inst/extdata/nodes.tsv"), sep = "\t")
names(v)
# read edges
e = read.csv(paste0(r, "inst/extdata/network.tsv"), sep = "\t")
names(e)
View(e)
net = network(e, directed = TRUE)
devtools::install_github("briatte/ggnet")
devtools::install_github("briatte/ggnet")
devtools::install_github("briatte/ggnet")
devtools::install_github("briatte/ggnet")
devtools::install_github("briatte/ggnet")
devtools::install_github("briatte/ggnet")
library(igraph)
library(magrittr)
library(GGally)
library(ggplot2)
devtools::install_github("briatte/ggnet")
library(ggnet)
library(GGally)
library(ggnet)
GGally::ggnet2(e)
GGally::ggnet2(e, color = "phono", palette = "Set1", edge.color = c("color", "grey50"))
View(e)
GGally::ggnet2(e, color = "phono", palette = "Set2")
e <- data.frame(data= LETTERS[1:10], data2 = letters[1:10])
GGally::ggnet2(e, color = "phono", palette = "Set2")
library(ggnet)
rm(list = ls())
dev.off()
q()
library(network)
library(rlang)
install.packages(ra)
install.packages(rlang)
install.packages("rlang")
library(network)
library(GGally)
library(network)
library(sna)
library(ggplot2)
devtools::install_github("briatte/ggnet")
devtools::install_github("briatte/ggnet")
devtools::install_github("briatte/ggnet")
devtools::install_github("briatte/ggnet")
devtools::install_github("briatte/ggnet")
devtools::install_github("briatte/ggnet")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
.libPaths()
packageStatus()
PATH="${RTOOLS40_HOME}\usr\bin;${PATH}"
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
install.packages("jsonlite", type = "source")
q()
df <- data.frame(x = c(1:100))
df$y <- 2 + 3 * df$x + rnorm(100, sd = 40)
m <- lm(y ~ x, data = df)
summary(m)
library(ggplot2)
lm_eqn <- function(df, lm_object) {
eq <-
substitute(
italic(y) == a + b %.% italic(x) * "," ~  ~ italic(r) ^ 2 ~ "=" ~ r2,
list(
a = format(coef(lm_object)[1], digits = 2),
b = format(coef(lm_object)[2], digits = 2),
r2 = format(summary(lm_object)$r.squared, digits = 3),
p = p_value, digits = 2
)
)
as.character(as.expression(eq))
}
# get the equation object in a format for use in ggplot2
eqn <- lm_eqn(df, m)
# plot everything
ggplot(data = df, aes(x = x, y = y)) +
geom_smooth(method = "lm", formula = y ~ x) +
geom_point() +
annotate("text",
x = 25,
y = 300,
label = "italic(p) <2e-16",
parse = TRUE) +
annotate("text",
x = 25,
y = 315,
label = eqn,
parse = TRUE) +
theme_minimal()
lm_eqn <- function(df, lm_object) {
eq <-
substitute(
italic(y) == a + b %.% italic(x) * "," ~  ~ italic(r) ^ 2 ~ "=" ~ r2,
list(
a = format(coef(lm_object)[1], digits = 2),
b = format(coef(lm_object)[2], digits = 2),
r2 = format(summary(lm_object)$r.squared, digits = 3),
p = p_value, digits = 2
)
)
as.character(as.expression(eq))
}
lm_eqn()
# get the equation object in a format for use in ggplot2
eqn <- lm_eqn(df, m)
# plot everything
ggplot(data = df, aes(x = x, y = y)) +
geom_smooth(method = "lm", formula = y ~ x) +
geom_point() +
annotate("text",
x = 25,
y = 300,
label = "italic(p) <2e-16",
parse = TRUE) +
annotate("text",
x = 25,
y = 315,
label = eqn,
parse = TRUE) +
theme_minimal()
data(mtcars)
force(mtcars)
require(ggplot2)
require(reshape2)
mtcars2 = melt(mtcars, id.vars='mpg')
View(mtcars2)
ggplot(mtcars2) +
geom_jitter(aes(value,mpg, colour=variable),) + geom_smooth(aes(value,mpg, colour=variable), method=lm, se=FALSE) +
facet_wrap(~variable, scales="free_x") +
labs(x = "Percentage cover (%)", y = "Number of individuals (N)")
ggplot(mtcars2) +
geom_jitter(aes(value,mpg, colour=variable),) + geom_smooth(aes(value,mpg, colour=variable), method=lm, se=FALSE) +
facet_wrap(~variable, scales="free_x") +
stat_cor(method = "pearson", label.x = 3, label.y = 30)+
labs(x = "Percentage cover (%)", y = "Number of individuals (N)")
ggplot(mtcars2) +
geom_jitter(aes(value,mpg, colour=variable),) + geom_smooth(aes(value,mpg, colour=variable), method=lm, se=FALSE) +
facet_wrap(~variable, scales="free_x") +
ggpubr::stat_cor(method = "pearson", label.x = 3, label.y = 30)+
labs(x = "Percentage cover (%)", y = "Number of individuals (N)")
ggplot(mtcars2) +
geom_jitter(aes(value,mpg, colour=variable),) + geom_smooth(aes(value,mpg, colour=variable), method=lm, se=FALSE) +
facet_wrap(~variable, scales="free_x") +
labs(x = "Percentage cover (%)", y = "Number of individuals (N)")
View(mtcars2)
View(mtcars)
rm(list = ls())
gc()
q()
getwd()
setwd("D:/Users/amare.wolide/Desktop/BioFig.git/Manuel")
expression <- read.csv("Data_expression_normalized.csv")
head(expression)
pheatmap::pheatmap(expression %>%
t() %>%
dist() %>%
as.matrix(),
main = "Sample dissmilarity",
fontsize = 14)
library(dplyr)
pheatmap::pheatmap(expression %>%
t() %>%
dist() %>%
as.matrix(),
main = "Sample dissmilarity",
fontsize = 14)
expression <- read.csv("Data_expression_normalized.csv", row.names = 1)
head(expression)
pheatmap::pheatmap(expression %>%
t() %>%
dist() %>%
as.matrix(),
main = "Sample dissmilarity",
fontsize = 14)
pheatmap::pheatmap(expression %>%
cor() %>%
as.matrix(),
main = "Sample similarity",
fontsize = 14)
pheatmap::pheatmap(expression %>%
t() %>%
dist() %>%
as.matrix(),
col = rev(RColorBrewer::brewer.pal(n = 8, name = "RdBu")),
main = "Sample dissmilarity",
fontsize = 14)
pheatmap::pheatmap(expression %>%
cor() %>%
as.matrix(),
col = rev(RColorBrewer::brewer.pal(n = 8, name = "RdBu")),
main = "Sample similarity",
fontsize = 14)
rm(list = ls())
gc()
dev.off()
gc()
q()
setwd("D:/Users/amare.wolide/Desktop/BioFig.git/Manuel")
expression <- read.csv("Data_expression_normalized.csv", row.names = 1)
sampleDis <- pheatmap::pheatmap(expression %>%
t() %>%
dist() %>%
as.matrix(),
col = rev(RColorBrewer::brewer.pal(n = 8, name = "RdBu")),
main = "Sample dissmilarity",
fontsize = 14)
library(dplyr)
sampleDis <- pheatmap::pheatmap(expression %>%
t() %>%
dist() %>%
as.matrix(),
col = rev(RColorBrewer::brewer.pal(n = 8, name = "RdBu")),
main = "Sample dissmilarity",
fontsize = 14)
pheatmap::pheatmap(expression %>%
cor() %>%
as.matrix(),
col = rev(RColorBrewer::brewer.pal(n = 8, name = "RdBu")),
main = "Sample similarity",
fontsize = 14)
cowplot::plot_grid(sampleDis, sampleCor, labels = "AUTO")
sampleDis <- pheatmap::pheatmap(expression %>%
t() %>%
dist() %>%
as.matrix(),
col = rev(RColorBrewer::brewer.pal(n = 8, name = "RdBu")),
main = "Sample dissmilarity",
fontsize = 14)
## calculate sample correlation(Similarity Measure )
sampleCor <- pheatmap::pheatmap(expression %>%
cor() %>%
as.matrix(),
col = rev(RColorBrewer::brewer.pal(n = 8, name = "RdBu")),
main = "Sample similarity",
fontsize = 14)
cowplot::plot_grid(sampleDis, sampleCor, labels = "AUTO")
rm(list = ls())
gc()
