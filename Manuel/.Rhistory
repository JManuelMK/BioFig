packageStatus()
PATH="${RTOOLS40_HOME}\usr\bin;${PATH}"
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
install.packages("jsonlite", type = "source")
q()
df <- data.frame(x = c(1:100))
df$y <- 2 + 3 * df$x + rnorm(100, sd = 40)
m <- lm(y ~ x, data = df)
summary(m)
library(ggplot2)
lm_eqn <- function(df, lm_object) {
eq <-
substitute(
italic(y) == a + b %.% italic(x) * "," ~  ~ italic(r) ^ 2 ~ "=" ~ r2,
list(
a = format(coef(lm_object)[1], digits = 2),
b = format(coef(lm_object)[2], digits = 2),
r2 = format(summary(lm_object)$r.squared, digits = 3),
p = p_value, digits = 2
)
)
as.character(as.expression(eq))
}
# get the equation object in a format for use in ggplot2
eqn <- lm_eqn(df, m)
# plot everything
ggplot(data = df, aes(x = x, y = y)) +
geom_smooth(method = "lm", formula = y ~ x) +
geom_point() +
annotate("text",
x = 25,
y = 300,
label = "italic(p) <2e-16",
parse = TRUE) +
annotate("text",
x = 25,
y = 315,
label = eqn,
parse = TRUE) +
theme_minimal()
lm_eqn <- function(df, lm_object) {
eq <-
substitute(
italic(y) == a + b %.% italic(x) * "," ~  ~ italic(r) ^ 2 ~ "=" ~ r2,
list(
a = format(coef(lm_object)[1], digits = 2),
b = format(coef(lm_object)[2], digits = 2),
r2 = format(summary(lm_object)$r.squared, digits = 3),
p = p_value, digits = 2
)
)
as.character(as.expression(eq))
}
lm_eqn()
# get the equation object in a format for use in ggplot2
eqn <- lm_eqn(df, m)
# plot everything
ggplot(data = df, aes(x = x, y = y)) +
geom_smooth(method = "lm", formula = y ~ x) +
geom_point() +
annotate("text",
x = 25,
y = 300,
label = "italic(p) <2e-16",
parse = TRUE) +
annotate("text",
x = 25,
y = 315,
label = eqn,
parse = TRUE) +
theme_minimal()
data(mtcars)
force(mtcars)
require(ggplot2)
require(reshape2)
mtcars2 = melt(mtcars, id.vars='mpg')
View(mtcars2)
ggplot(mtcars2) +
geom_jitter(aes(value,mpg, colour=variable),) + geom_smooth(aes(value,mpg, colour=variable), method=lm, se=FALSE) +
facet_wrap(~variable, scales="free_x") +
labs(x = "Percentage cover (%)", y = "Number of individuals (N)")
ggplot(mtcars2) +
geom_jitter(aes(value,mpg, colour=variable),) + geom_smooth(aes(value,mpg, colour=variable), method=lm, se=FALSE) +
facet_wrap(~variable, scales="free_x") +
stat_cor(method = "pearson", label.x = 3, label.y = 30)+
labs(x = "Percentage cover (%)", y = "Number of individuals (N)")
ggplot(mtcars2) +
geom_jitter(aes(value,mpg, colour=variable),) + geom_smooth(aes(value,mpg, colour=variable), method=lm, se=FALSE) +
facet_wrap(~variable, scales="free_x") +
ggpubr::stat_cor(method = "pearson", label.x = 3, label.y = 30)+
labs(x = "Percentage cover (%)", y = "Number of individuals (N)")
ggplot(mtcars2) +
geom_jitter(aes(value,mpg, colour=variable),) + geom_smooth(aes(value,mpg, colour=variable), method=lm, se=FALSE) +
facet_wrap(~variable, scales="free_x") +
labs(x = "Percentage cover (%)", y = "Number of individuals (N)")
View(mtcars2)
View(mtcars)
rm(list = ls())
gc()
q()
getwd()
setwd("D:/Users/amare.wolide/Desktop/BioFig.git/Manuel")
expression <- read.csv("Data_expression_normalized.csv")
head(expression)
pheatmap::pheatmap(expression %>%
t() %>%
dist() %>%
as.matrix(),
main = "Sample dissmilarity",
fontsize = 14)
library(dplyr)
pheatmap::pheatmap(expression %>%
t() %>%
dist() %>%
as.matrix(),
main = "Sample dissmilarity",
fontsize = 14)
expression <- read.csv("Data_expression_normalized.csv", row.names = 1)
head(expression)
pheatmap::pheatmap(expression %>%
t() %>%
dist() %>%
as.matrix(),
main = "Sample dissmilarity",
fontsize = 14)
pheatmap::pheatmap(expression %>%
cor() %>%
as.matrix(),
main = "Sample similarity",
fontsize = 14)
pheatmap::pheatmap(expression %>%
t() %>%
dist() %>%
as.matrix(),
col = rev(RColorBrewer::brewer.pal(n = 8, name = "RdBu")),
main = "Sample dissmilarity",
fontsize = 14)
pheatmap::pheatmap(expression %>%
cor() %>%
as.matrix(),
col = rev(RColorBrewer::brewer.pal(n = 8, name = "RdBu")),
main = "Sample similarity",
fontsize = 14)
rm(list = ls())
gc()
dev.off()
gc()
q()
setwd("D:/Users/amare.wolide/Desktop/BioFig.git/Manuel")
expression <- read.csv("Data_expression_normalized.csv", row.names = 1)
sampleDis <- pheatmap::pheatmap(expression %>%
t() %>%
dist() %>%
as.matrix(),
col = rev(RColorBrewer::brewer.pal(n = 8, name = "RdBu")),
main = "Sample dissmilarity",
fontsize = 14)
library(dplyr)
sampleDis <- pheatmap::pheatmap(expression %>%
t() %>%
dist() %>%
as.matrix(),
col = rev(RColorBrewer::brewer.pal(n = 8, name = "RdBu")),
main = "Sample dissmilarity",
fontsize = 14)
pheatmap::pheatmap(expression %>%
cor() %>%
as.matrix(),
col = rev(RColorBrewer::brewer.pal(n = 8, name = "RdBu")),
main = "Sample similarity",
fontsize = 14)
cowplot::plot_grid(sampleDis, sampleCor, labels = "AUTO")
sampleDis <- pheatmap::pheatmap(expression %>%
t() %>%
dist() %>%
as.matrix(),
col = rev(RColorBrewer::brewer.pal(n = 8, name = "RdBu")),
main = "Sample dissmilarity",
fontsize = 14)
## calculate sample correlation(Similarity Measure )
sampleCor <- pheatmap::pheatmap(expression %>%
cor() %>%
as.matrix(),
col = rev(RColorBrewer::brewer.pal(n = 8, name = "RdBu")),
main = "Sample similarity",
fontsize = 14)
cowplot::plot_grid(sampleDis, sampleCor, labels = "AUTO")
rm(list = ls())
gc()
library(limma)
?mds
?MDS
?cmdscale
m  <- matrix(rnorm(25) , nrow = 5)
View(m)
rownames(m) <- c("gene1", "gene2", "gene3", "gene4", "gene5")
names(m) <- c("S1","S2", "S3", "S4","S5")
View(m)
colnames(m) <- c("S1","S2","S3", "S4","S5")
View(m)
plot_MDS<-function(expression,group,point.size,
LegendName_Color="group",
LegendName_Shape="shape",...){
## calculate distance for the sample
data <- expression %>%
t() %>%
dist() %>%
as.matrix()
## convert distance matrix to Classical multidimensional scaling(MDS)
mdsData <- data.frame(cmdscale(data))
mds <- cbind(mdsData, as.data.frame(data)) # combine with distance with mds
## plot in ggplot2
plotmds <- ggplot(mds, aes(X1, X2,color=group)) +
geom_point(size = point.size) +
ggTheme(1) +
labs(x = "Leading LogFC dim 1", y = "Leading LogFC dim 2", title = "MDS plot") +
labs(shape=LegendName_Shape, col=LegendName_Color)+
ggrepel::geom_text_repel(data = mds,aes(label = rownames(mds)))
return(plotmds)
}
# generated with the help of rnorm()
m  <- matrix(rnorm(25) , nrow = 5)
rownames(m) <- c("gene1", "gene2", "gene3", "gene4", "gene5")
colnames(m) <- c("S1","S2","S3", "S4","S5")
plot_MDS(m
plot_MDS<-function(expression,group,point.size,
LegendName_Color="group",
LegendName_Shape="shape",...){
## calculate distance for the sample
data <- expression %>%
t() %>%
dist() %>%
as.matrix()
## convert distance matrix to Classical multidimensional scaling(MDS)
mdsData <- data.frame(cmdscale(data))
mds <- cbind(mdsData, as.data.frame(data)) # combine with distance with mds
## plot in ggplot2
plotmds <- ggplot(mds, aes(X1, X2,color=group)) +
geom_point(size = point.size) +
ggTheme(1) +
labs(x = "Leading LogFC dim 1", y = "Leading LogFC dim 2", title = "MDS plot") +
labs(shape=LegendName_Shape, col=LegendName_Color)+
ggrepel::geom_text_repel(data = mds,aes(label = rownames(mds)))
return(plotmds)
}
plot_MDS <-function(expression,group,point.size,
LegendName_Color="group",
LegendName_Shape="shape",...){
## calculate distance for the sample
data <- expression %>%
t() %>%
dist() %>%
as.matrix()
## convert distance matrix to Classical multidimensional scaling(MDS)
mdsData <- data.frame(cmdscale(data))
mds <- cbind(mdsData, as.data.frame(data)) # combine with distance with mds
## plot in ggplot2
plotmds <- ggplot(mds, aes(X1, X2,color=group)) +
geom_point(size = point.size) +
ggTheme(1) +
labs(x = "Leading LogFC dim 1", y = "Leading LogFC dim 2", title = "MDS plot") +
labs(shape=LegendName_Shape, col=LegendName_Color)+
ggrepel::geom_text_repel(data = mds,aes(label = rownames(mds)))
return(plotmds)
}
plot_MDS(m)
library(tidyverse)
plot_MDS <-function(expression,group,point.size,
LegendName_Color="group",
LegendName_Shape="shape",...){
## calculate distance for the sample
data <- expression %>%
t() %>%
dist() %>%
as.matrix()
## convert distance matrix to Classical multidimensional scaling(MDS)
mdsData <- data.frame(cmdscale(data))
mds <- cbind(mdsData, as.data.frame(data)) # combine with distance with mds
## plot in ggplot2
plotmds <- ggplot(mds, aes(X1, X2,color=group)) +
geom_point(size = point.size) +
ggTheme(1) +
labs(x = "Leading LogFC dim 1", y = "Leading LogFC dim 2", title = "MDS plot") +
labs(shape=LegendName_Shape, col=LegendName_Color)+
ggrepel::geom_text_repel(data = mds,aes(label = rownames(mds)))
return(plotmds)
}
# generated with the help of rnorm()
m  <- matrix(rnorm(25) , nrow = 5)
rownames(m) <- c("gene1", "gene2", "gene3", "gene4", "gene5")
colnames(m) <- c("S1","S2","S3", "S4","S5")
plot_MDS(m)
plot_MDS(m, point.size = 5)
?ggTheme
plot_MDS <-function(expression,group,point.size,
LegendName_Color="group",
LegendName_Shape="shape",...){
## calculate distance for the sample
data <- expression %>%
t() %>%
dist() %>%
as.matrix()
## convert distance matrix to Classical multidimensional scaling(MDS)
mdsData <- data.frame(cmdscale(data))
mds <- cbind(mdsData, as.data.frame(data)) # combine with distance with mds
## plot in ggplot2
plotmds <- ggplot(mds, aes(X1, X2,color=group)) +
geom_point(size = point.size) +
theme(1) +
labs(x = "Leading LogFC dim 1", y = "Leading LogFC dim 2", title = "MDS plot") +
labs(shape=LegendName_Shape, col=LegendName_Color)+
ggrepel::geom_text_repel(data = mds,aes(label = rownames(mds)))
return(plotmds)
}
# generated with the help of rnorm()
m  <- matrix(rnorm(25) , nrow = 5)
rownames(m) <- c("gene1", "gene2", "gene3", "gene4", "gene5")
colnames(m) <- c("S1","S2","S3", "S4","S5")
plot_MDS(m, point.size = 5)
group <- c(WT=c("S1","S2"),KO = c("S3", "S4","S5"))
plot_MDS(m, point.size = 5, group = group)
plot_MDS <-function(expression,group,point.size,
LegendName_Color="group",
LegendName_Shape="shape",...){
## calculate distance for the sample
data <- expression %>%
t() %>%
dist() %>%
as.matrix()
## convert distance matrix to Classical multidimensional scaling(MDS)
mdsData <- data.frame(cmdscale(data))
mds <- cbind(mdsData, as.data.frame(data)) # combine with distance with mds
## plot in ggplot2
plotmds <- ggplot(mds, aes(X1, X2,color=group)) +
geom_point(size = point.size) +
# ggTheme(1) +
labs(x = "Leading LogFC dim 1", y = "Leading LogFC dim 2", title = "MDS plot") +
labs(shape=LegendName_Shape, col=LegendName_Color)+
ggrepel::geom_text_repel(data = mds,aes(label = rownames(mds)))
return(plotmds)
}
# generated with the help of rnorm()
m  <- matrix(rnorm(25) , nrow = 5)
rownames(m) <- c("gene1", "gene2", "gene3", "gene4", "gene5")
colnames(m) <- c("S1","S2","S3", "S4","S5")
group <- c(WT=c("S1","S2"),KO = c("S3", "S4","S5"))
plot_MDS(m, point.size = 5, group = group)
group <- data.frame(WT=c("S1","S2"),KO = c("S3", "S4","S5"))
group <- factor(WT= c("S1","S2"), KO = c("S3", "S4","S5"))
group <- as.factor(WT= c("S1","S2"), KO = c("S3", "S4","S5"))
m  <- matrix(rnorm(25) , nrow = 5)
rownames(m) <- c("gene1", "gene2", "gene3", "gene4", "gene5")
colnames(m) <- c("S1","S2","S3", "S4","S5")
group <- colnames(m)
plot_MDS(m, point.size = 5, group = group)
plot_MDS <-function(expression,group,point.size,
LegendName_Color="group",
LegendName_Shape="shape",...){
## calculate distance for the sample
data <- expression %>%
t() %>%
dist() %>%
as.matrix()
## convert distance matrix to Classical multidimensional scaling(MDS)
mdsData <- data.frame(cmdscale(data))
mds <- cbind(mdsData, as.data.frame(data)) # combine with distance with mds
## plot in ggplot2
plotmds <- ggplot(mds, aes(X1, X2,color=group)) +
geom_point(size = point.size) +
ggtheme(1) +
labs(x = "Leading LogFC dim 1", y = "Leading LogFC dim 2", title = "MDS plot") +
labs(shape=LegendName_Shape, col=LegendName_Color)+
ggrepel::geom_text_repel(data = mds,aes(label = rownames(mds)))
return(plotmds)
# generated with the help of rnorm()
set.seed(78)
m  <- matrix(rnorm(25) , nrow = 5)
rownames(m) <- c("gene1", "gene2", "gene3", "gene4", "gene5")
colnames(m) <- c("S1","S2","S3", "S4","S5")
group <- colnames(m)
plot_MDS(m, point.size = 5, group = group)
}
library(tidyverse)
plot_MDS <-function(expression,group,point.size,
LegendName_Color="group",
LegendName_Shape="shape",...){
## calculate distance for the sample
data <- expression %>%
t() %>%
dist() %>%
as.matrix()
## convert distance matrix to Classical multidimensional scaling(MDS)
mdsData <- data.frame(cmdscale(data))
mds <- cbind(mdsData, as.data.frame(data)) # combine with distance with mds
## plot in ggplot2
plotmds <- ggplot(mds, aes(X1, X2,color=group)) +
geom_point(size = point.size) +
ggtheme(1) +
labs(x = "Leading LogFC dim 1", y = "Leading LogFC dim 2", title = "MDS plot") +
labs(shape=LegendName_Shape, col=LegendName_Color)+
ggrepel::geom_text_repel(data = mds,aes(label = rownames(mds)))
return(plotmds)
}
# generated with the help of rnorm()
set.seed(78)
m  <- matrix(rnorm(25) , nrow = 5)
rownames(m) <- c("gene1", "gene2", "gene3", "gene4", "gene5")
colnames(m) <- c("S1","S2","S3", "S4","S5")
group <- colnames(m)
plot_MDS(m, point.size = 5, group = group)
plot_MDS <-function(expression,group,point.size,
LegendName_Color="group",
LegendName_Shape="shape",...){
## calculate distance for the sample
data <- expression %>%
t() %>%
dist() %>%
as.matrix()
## convert distance matrix to Classical multidimensional scaling(MDS)
mdsData <- data.frame(cmdscale(data))
mds <- cbind(mdsData, as.data.frame(data)) # combine with distance with mds
## plot in ggplot2
plotmds <- ggplot(mds, aes(X1, X2,color=group)) +
geom_point(size = point.size) +
ggTheme(1) +
labs(x = "Leading LogFC dim 1", y = "Leading LogFC dim 2", title = "MDS plot") +
labs(shape=LegendName_Shape, col=LegendName_Color)+
ggrepel::geom_text_repel(data = mds,aes(label = rownames(mds)))
return(plotmds)
}
set.seed(78)
m  <- matrix(rnorm(25) , nrow = 5)
rownames(m) <- c("gene1", "gene2", "gene3", "gene4", "gene5")
colnames(m) <- c("S1","S2","S3", "S4","S5")
group <- colnames(m)
plot_MDS(m, point.size = 5, group = group)
m  <- matrix(rnorm(100) , nrow = 5)
View(m)
m  <- matrix(rnorm(100) , nrow = 20)
View(m)
rownames(m) <- paste0("gene_")
rownames(m) <-  paste0(rep("gene_",20))
View(m)
rownames(m) <-  paste0(rep("gene",20))
View(m)
rownames(m) <-  paste0(rep("gene",1:20))
rownames(m) <-  paste(rep("gene_",20))
View(m)
rownames(m) <-  paste0(rep("gene",20))
colnames(m) <- c("S1","S2","S3", "S4","S5")
group <- colnames(m)
plot_MDS(m, point.size = 5, group = group)
set.seed(78)
m  <- matrix(rnorm(100) , nrow = 20)
rownames(m) <-  paste0(rep("gene",20))
colnames(m) <- c("S1","S2","S3", "S4","S5")
group <- colnames(m)
plot_MDS(m, point.size = 5, group = group)
library(tidyverse)
plot_MDS <-function(expression,group,point.size,
LegendName_Color="group",
LegendName_Shape="shape",...){
## calculate distance for the sample
data <- expression %>%
t() %>%
dist() %>%
as.matrix()
## convert distance matrix to Classical multidimensional scaling(MDS)
mdsData <- data.frame(cmdscale(data))
mds <- cbind(mdsData, as.data.frame(data)) # combine with distance with mds
## plot in ggplot2
plotmds <- ggplot(mds, aes(X1, X2,color=group)) +
geom_point(size = point.size) +
#ggTheme(1) +
labs(x = "Leading LogFC dim 1", y = "Leading LogFC dim 2", title = "MDS plot") +
labs(shape=LegendName_Shape, col=LegendName_Color)+
ggrepel::geom_text_repel(data = mds,aes(label = rownames(mds)))
return(plotmds)
}
set.seed(78)
m  <- matrix(rnorm(100) , nrow = 20)
rownames(m) <-  paste0(rep("gene",20))
colnames(m) <- c("S1","S2","S3", "S4","S5")
group <- colnames(m)
plot_MDS(m, point.size = 5, group = group)
plot_SampleDistance<-function(expression,...){
## calculate distance(Dissimilarity Measure )
sampleDis <- pheatmap::pheatmap(expression %>%
t() %>%
dist() %>%
as.matrix(),
col = rev(RColorBrewer::brewer.pal(n = 8, name = "RdBu")),
main = "Sample dissmilarity",
fontsize = 9.23,
fontsize_col = 12,
fontsize_row = 12)
## calculate sample correlation(Similarity Measure )
sampleCor <- pheatmap::pheatmap(expression %>%
cor() %>%
as.matrix(),
col = rev(RColorBrewer::brewer.pal(n = 8, name = "RdBu")),
main = "Sample similarity",
fontsize = 9.23,
fontsize_col = 12,
fontsize_row = 12)
listplots<-list()
listplots[[1]]<-sampleDis
listplots[[2]]<-sampleCor
return(listplots)
}
plot_SampleDistance(m)
