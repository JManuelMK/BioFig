plot_MDS <-function(expression,group,point.size,
LegendName_Color="group",
LegendName_Shape="shape",...){
## calculate distance for the sample
data <- expression %>%
t() %>%
dist() %>%
as.matrix()
## convert distance matrix to Classical multidimensional scaling(MDS)
mdsData <- data.frame(cmdscale(data))
mds <- cbind(mdsData, as.data.frame(data)) # combine with distance with mds
## plot in ggplot2
plotmds <- ggplot(mds, aes(X1, X2,color=group)) +
geom_point(size = point.size) +
ggTheme(1) +
labs(x = "Leading LogFC dim 1", y = "Leading LogFC dim 2", title = "MDS plot") +
labs(shape=LegendName_Shape, col=LegendName_Color)+
ggrepel::geom_text_repel(data = mds,aes(label = rownames(mds)))
return(plotmds)
}
# generated with the help of rnorm()
m  <- matrix(rnorm(25) , nrow = 5)
rownames(m) <- c("gene1", "gene2", "gene3", "gene4", "gene5")
colnames(m) <- c("S1","S2","S3", "S4","S5")
plot_MDS(m)
plot_MDS(m, point.size = 5)
?ggTheme
plot_MDS <-function(expression,group,point.size,
LegendName_Color="group",
LegendName_Shape="shape",...){
## calculate distance for the sample
data <- expression %>%
t() %>%
dist() %>%
as.matrix()
## convert distance matrix to Classical multidimensional scaling(MDS)
mdsData <- data.frame(cmdscale(data))
mds <- cbind(mdsData, as.data.frame(data)) # combine with distance with mds
## plot in ggplot2
plotmds <- ggplot(mds, aes(X1, X2,color=group)) +
geom_point(size = point.size) +
theme(1) +
labs(x = "Leading LogFC dim 1", y = "Leading LogFC dim 2", title = "MDS plot") +
labs(shape=LegendName_Shape, col=LegendName_Color)+
ggrepel::geom_text_repel(data = mds,aes(label = rownames(mds)))
return(plotmds)
}
# generated with the help of rnorm()
m  <- matrix(rnorm(25) , nrow = 5)
rownames(m) <- c("gene1", "gene2", "gene3", "gene4", "gene5")
colnames(m) <- c("S1","S2","S3", "S4","S5")
plot_MDS(m, point.size = 5)
group <- c(WT=c("S1","S2"),KO = c("S3", "S4","S5"))
plot_MDS(m, point.size = 5, group = group)
plot_MDS <-function(expression,group,point.size,
LegendName_Color="group",
LegendName_Shape="shape",...){
## calculate distance for the sample
data <- expression %>%
t() %>%
dist() %>%
as.matrix()
## convert distance matrix to Classical multidimensional scaling(MDS)
mdsData <- data.frame(cmdscale(data))
mds <- cbind(mdsData, as.data.frame(data)) # combine with distance with mds
## plot in ggplot2
plotmds <- ggplot(mds, aes(X1, X2,color=group)) +
geom_point(size = point.size) +
# ggTheme(1) +
labs(x = "Leading LogFC dim 1", y = "Leading LogFC dim 2", title = "MDS plot") +
labs(shape=LegendName_Shape, col=LegendName_Color)+
ggrepel::geom_text_repel(data = mds,aes(label = rownames(mds)))
return(plotmds)
}
# generated with the help of rnorm()
m  <- matrix(rnorm(25) , nrow = 5)
rownames(m) <- c("gene1", "gene2", "gene3", "gene4", "gene5")
colnames(m) <- c("S1","S2","S3", "S4","S5")
group <- c(WT=c("S1","S2"),KO = c("S3", "S4","S5"))
plot_MDS(m, point.size = 5, group = group)
group <- data.frame(WT=c("S1","S2"),KO = c("S3", "S4","S5"))
group <- factor(WT= c("S1","S2"), KO = c("S3", "S4","S5"))
group <- as.factor(WT= c("S1","S2"), KO = c("S3", "S4","S5"))
m  <- matrix(rnorm(25) , nrow = 5)
rownames(m) <- c("gene1", "gene2", "gene3", "gene4", "gene5")
colnames(m) <- c("S1","S2","S3", "S4","S5")
group <- colnames(m)
plot_MDS(m, point.size = 5, group = group)
plot_MDS <-function(expression,group,point.size,
LegendName_Color="group",
LegendName_Shape="shape",...){
## calculate distance for the sample
data <- expression %>%
t() %>%
dist() %>%
as.matrix()
## convert distance matrix to Classical multidimensional scaling(MDS)
mdsData <- data.frame(cmdscale(data))
mds <- cbind(mdsData, as.data.frame(data)) # combine with distance with mds
## plot in ggplot2
plotmds <- ggplot(mds, aes(X1, X2,color=group)) +
geom_point(size = point.size) +
ggtheme(1) +
labs(x = "Leading LogFC dim 1", y = "Leading LogFC dim 2", title = "MDS plot") +
labs(shape=LegendName_Shape, col=LegendName_Color)+
ggrepel::geom_text_repel(data = mds,aes(label = rownames(mds)))
return(plotmds)
# generated with the help of rnorm()
set.seed(78)
m  <- matrix(rnorm(25) , nrow = 5)
rownames(m) <- c("gene1", "gene2", "gene3", "gene4", "gene5")
colnames(m) <- c("S1","S2","S3", "S4","S5")
group <- colnames(m)
plot_MDS(m, point.size = 5, group = group)
}
library(tidyverse)
plot_MDS <-function(expression,group,point.size,
LegendName_Color="group",
LegendName_Shape="shape",...){
## calculate distance for the sample
data <- expression %>%
t() %>%
dist() %>%
as.matrix()
## convert distance matrix to Classical multidimensional scaling(MDS)
mdsData <- data.frame(cmdscale(data))
mds <- cbind(mdsData, as.data.frame(data)) # combine with distance with mds
## plot in ggplot2
plotmds <- ggplot(mds, aes(X1, X2,color=group)) +
geom_point(size = point.size) +
ggtheme(1) +
labs(x = "Leading LogFC dim 1", y = "Leading LogFC dim 2", title = "MDS plot") +
labs(shape=LegendName_Shape, col=LegendName_Color)+
ggrepel::geom_text_repel(data = mds,aes(label = rownames(mds)))
return(plotmds)
}
# generated with the help of rnorm()
set.seed(78)
m  <- matrix(rnorm(25) , nrow = 5)
rownames(m) <- c("gene1", "gene2", "gene3", "gene4", "gene5")
colnames(m) <- c("S1","S2","S3", "S4","S5")
group <- colnames(m)
plot_MDS(m, point.size = 5, group = group)
plot_MDS <-function(expression,group,point.size,
LegendName_Color="group",
LegendName_Shape="shape",...){
## calculate distance for the sample
data <- expression %>%
t() %>%
dist() %>%
as.matrix()
## convert distance matrix to Classical multidimensional scaling(MDS)
mdsData <- data.frame(cmdscale(data))
mds <- cbind(mdsData, as.data.frame(data)) # combine with distance with mds
## plot in ggplot2
plotmds <- ggplot(mds, aes(X1, X2,color=group)) +
geom_point(size = point.size) +
ggTheme(1) +
labs(x = "Leading LogFC dim 1", y = "Leading LogFC dim 2", title = "MDS plot") +
labs(shape=LegendName_Shape, col=LegendName_Color)+
ggrepel::geom_text_repel(data = mds,aes(label = rownames(mds)))
return(plotmds)
}
set.seed(78)
m  <- matrix(rnorm(25) , nrow = 5)
rownames(m) <- c("gene1", "gene2", "gene3", "gene4", "gene5")
colnames(m) <- c("S1","S2","S3", "S4","S5")
group <- colnames(m)
plot_MDS(m, point.size = 5, group = group)
m  <- matrix(rnorm(100) , nrow = 5)
View(m)
m  <- matrix(rnorm(100) , nrow = 20)
View(m)
rownames(m) <- paste0("gene_")
rownames(m) <-  paste0(rep("gene_",20))
View(m)
rownames(m) <-  paste0(rep("gene",20))
View(m)
rownames(m) <-  paste0(rep("gene",1:20))
rownames(m) <-  paste(rep("gene_",20))
View(m)
rownames(m) <-  paste0(rep("gene",20))
colnames(m) <- c("S1","S2","S3", "S4","S5")
group <- colnames(m)
plot_MDS(m, point.size = 5, group = group)
set.seed(78)
m  <- matrix(rnorm(100) , nrow = 20)
rownames(m) <-  paste0(rep("gene",20))
colnames(m) <- c("S1","S2","S3", "S4","S5")
group <- colnames(m)
plot_MDS(m, point.size = 5, group = group)
library(tidyverse)
plot_MDS <-function(expression,group,point.size,
LegendName_Color="group",
LegendName_Shape="shape",...){
## calculate distance for the sample
data <- expression %>%
t() %>%
dist() %>%
as.matrix()
## convert distance matrix to Classical multidimensional scaling(MDS)
mdsData <- data.frame(cmdscale(data))
mds <- cbind(mdsData, as.data.frame(data)) # combine with distance with mds
## plot in ggplot2
plotmds <- ggplot(mds, aes(X1, X2,color=group)) +
geom_point(size = point.size) +
#ggTheme(1) +
labs(x = "Leading LogFC dim 1", y = "Leading LogFC dim 2", title = "MDS plot") +
labs(shape=LegendName_Shape, col=LegendName_Color)+
ggrepel::geom_text_repel(data = mds,aes(label = rownames(mds)))
return(plotmds)
}
set.seed(78)
m  <- matrix(rnorm(100) , nrow = 20)
rownames(m) <-  paste0(rep("gene",20))
colnames(m) <- c("S1","S2","S3", "S4","S5")
group <- colnames(m)
plot_MDS(m, point.size = 5, group = group)
plot_SampleDistance<-function(expression,...){
## calculate distance(Dissimilarity Measure )
sampleDis <- pheatmap::pheatmap(expression %>%
t() %>%
dist() %>%
as.matrix(),
col = rev(RColorBrewer::brewer.pal(n = 8, name = "RdBu")),
main = "Sample dissmilarity",
fontsize = 9.23,
fontsize_col = 12,
fontsize_row = 12)
## calculate sample correlation(Similarity Measure )
sampleCor <- pheatmap::pheatmap(expression %>%
cor() %>%
as.matrix(),
col = rev(RColorBrewer::brewer.pal(n = 8, name = "RdBu")),
main = "Sample similarity",
fontsize = 9.23,
fontsize_col = 12,
fontsize_row = 12)
listplots<-list()
listplots[[1]]<-sampleDis
listplots[[2]]<-sampleCor
return(listplots)
}
plot_SampleDistance(m)
?cmdscale
plot_MDS <-function(expression,group,point.size,
LegendName_Color="group",
LegendName_Shape="shape",...){
## calculate distance for the sample
data <- expression %>%
t() %>%
dist() %>%
as.matrix()
## convert distance matrix to Classical multidimensional scaling(MDS)
mdsData <- data.frame(cmdscale(data))
mds <- cbind(mdsData, as.data.frame(data)) # combine with distance with mds
## plot in ggplot2
plotmds <- ggplot(mds, aes(X1, X2,color=group)) +
geom_point(size = point.size) +
#ggTheme(1) +
labs(x = "Leading LogFC dim 1", y = "Leading LogFC dim 2", title = "MDS plot") +
labs(shape=LegendName_Shape, col=LegendName_Color)+
ggrepel::geom_text_repel(data = mds,aes(label = rownames(mds)),max.overlaps = Inf)
return(plotmds)
}
m  <- matrix(rnorm(100) , nrow = 20)
rownames(m) <-  paste0(rep("gene",20))
colnames(m) <- c("S1","S2","S3", "S4","S5")
group <- colnames(m)
plot_MDS(m, point.size = 5, group = group)
library(tidyverse)
m  <- matrix(rnorm(100) , nrow = 20)
rownames(m) <-  paste0(rep("gene",20))
colnames(m) <- c("S1","S2","S3", "S4","S5")
group <- colnames(m)
plot_MDS(m, point.size = 5, group = group)
m <- m %>% t() %>% dist() %>% as.matrix()
View(m)
mdsData <- data.frame(cmdscale(m))
View(mdsData)
mds <- cbind(mdsData, as.data.frame(data)) # combine with distance with mds
mdsData  <- cbind(mdsData, as.data.frame(m )) # combine with distance with mds
View(mdsData)
mean(mdsData$S1)
plot_MDS <-function(expression,group,point.size = NULL,
LegendName_Color="group",
LegendName_Shape="shape",...){
## calculate distance for the sample
data <- expression %>%
t() %>%
dist() %>%
as.matrix()
## convert distance matrix to Classical multidimensional scaling(MDS)
mdsData <- data.frame(cmdscale(data))
mds <- cbind(mdsData, as.data.frame(data)) # combine with distance with mds
## plot in ggplot2
plotmds <- ggplot(mds, aes(X1, X2,color=group)) +
geom_point(size = point.size) +
#ggTheme(1) +
labs(x = "Leading LogFC dim 1", y = "Leading LogFC dim 2", title = "MDS plot") +
labs(shape=LegendName_Shape, col=LegendName_Color)+
ggrepel::geom_text_repel(data = mds,aes(label = rownames(mds)),max.overlaps = Inf)
return(plotmds)
}
# generated with the help of rnorm()
set.seed(78)
m  <- matrix(rnorm(100) , nrow = 20)
rownames(m) <-  paste0(rep("gene",20))
colnames(m) <- c("S1","S2","S3", "S4","S5")
plot_MDS(m, group = group)
plot_MDS <-function(expression,group,point.size = NULL,
LegendName_Color="group",
LegendName_Shape="shape",...){
## calculate distance for the sample
data <- expression %>%
t() %>%
dist() %>%
as.matrix()
## convert distance matrix to Classical multidimensional scaling(MDS)
mdsData <- data.frame(cmdscale(data))
mds <- cbind(mdsData, as.data.frame(data)) # combine with distance with mds
## plot in ggplot2
plotmds <- ggplot(mds, aes(X1, X2,color=group)) +
geom_point(size = point.size) +
#ggTheme(1) +
labs(x = "Leading LogFC dim 1", y = "Leading LogFC dim 2", title = "MDS plot") +
labs(shape=LegendName_Shape, col=LegendName_Color)+
ggrepel::geom_text_repel(data = mds,aes(label = rownames(mds)),max.overlaps = Inf)
return(plotmds)
}
# generated with the help of rnorm()
set.seed(78)
m  <- matrix(rnorm(100) , nrow = 20)
rownames(m) <-  paste0(rep("gene",20))
colnames(m) <- c("S1","S2","S3", "S4","S5")
group <- colnames(m)
plot_MDS(m, group = group)
plot_MDS(m, point.size = 5, group = group)
plot_MDS <-function(expression,group,point.size,
LegendName_Color="group",
LegendName_Shape="shape",...){
## calculate distance for the sample
data <- expression %>%
t() %>%
dist() %>%
as.matrix()
## convert distance matrix to Classical multidimensional scaling(MDS)
mdsData <- data.frame(cmdscale(data))
mds <- cbind(mdsData, as.data.frame(data)) # combine with distance with mds
## plot in ggplot2
plotmds <- ggplot(mds, aes(X1, X2,color=group)) +
geom_point(size = point.size) +
#ggTheme(1) +
labs(x = "Leading LogFC dim 1", y = "Leading LogFC dim 2", title = "MDS plot") +
labs(shape=LegendName_Shape, col=LegendName_Color)+
ggrepel::geom_text_repel(data = mds,aes(label = rownames(mds)),max.overlaps = Inf)
return(plotmds)
}
# generated with the help of rnorm()
set.seed(78)
m  <- matrix(rnorm(100) , nrow = 20)
rownames(m) <-  paste0(rep("gene",20))
colnames(m) <- c("S1","S2","S3", "S4","S5")
group <- colnames(m)
plot_MDS(m, point.size = 5, group = group)
plot_SampleDistance<-function(expression,...){
## calculate distance(Dissimilarity Measure )
sampleDis <- pheatmap::pheatmap(expression %>%
t() %>%
dist() %>%
as.matrix(),
col = rev(RColorBrewer::brewer.pal(n = 8, name = "RdBu")),
main = "Sample dissmilarity",
fontsize = 9.23,
fontsize_col = 12,
fontsize_row = 12)
## calculate sample correlation(Similarity Measure )
sampleCor <- pheatmap::pheatmap(expression %>%
cor() %>%
as.matrix(),
col = rev(RColorBrewer::brewer.pal(n = 8, name = "RdBu")),
main = "Sample similarity",
fontsize = 9.23,
fontsize_col = 12,
fontsize_row = 12)
listplots<-list()
listplots[[1]]<-sampleDis
listplots[[2]]<-sampleCor
return(listplots)
}
# generated with the help of rnorm()
set.seed(78)
m  <- matrix(rnorm(100) , nrow = 20)
rownames(m) <-  paste0(rep("gene",20))
colnames(m) <- c("S1","S2","S3", "S4","S5")
group <- colnames(m)
sampleDis(m)
plot_SampleDistance<-function(expression,...){
## calculate distance(Dissimilarity Measure )
sampleDis <- pheatmap::pheatmap(expression %>%
t() %>%
dist() %>%
as.matrix(),
col = rev(RColorBrewer::brewer.pal(n = 8, name = "RdBu")),
main = "Sample dissmilarity",
fontsize = 9.23,
fontsize_col = 12,
fontsize_row = 12)
## calculate sample correlation(Similarity Measure )
sampleCor <- pheatmap::pheatmap(expression %>%
cor() %>%
as.matrix(),
col = rev(RColorBrewer::brewer.pal(n = 8, name = "RdBu")),
main = "Sample similarity",
fontsize = 9.23,
fontsize_col = 12,
fontsize_row = 12)
listplots<-list()
listplots[[1]]<-sampleDis
listplots[[2]]<-sampleCor
return(listplots)
}
# generated with the help of rnorm()
set.seed(78)
m  <- matrix(rnorm(100) , nrow = 20)
rownames(m) <-  paste0(rep("gene",20))
colnames(m) <- c("S1","S2","S3", "S4","S5")
group <- colnames(m)
sampleDis(m)
# Sample distance heatmap
#'@description This function is created to show variable dissimilarity/similarity in a heatmap using distance or correlation as method.
#'@param expression Numerical matrix with samples as columns (e.g gene expression)
#'@return It returns a heatmap plot showing  dissimilarity/similarity between the samples
#'@import tidyverse
#'@import pheatmap
#'@import RColorBrewer
#'@example
#'
plot_SampleDistance<-function(expression,...){
## calculate distance(Dissimilarity Measure )
sampleDis <- pheatmap::pheatmap(expression %>%
t() %>%
dist() %>%
as.matrix(),
col = rev(RColorBrewer::brewer.pal(n = 8, name = "RdBu")),
main = "Sample dissmilarity",
fontsize = 9.23,
fontsize_col = 12,
fontsize_row = 12)
## calculate sample correlation(Similarity Measure )
sampleCor <- pheatmap::pheatmap(expression %>%
cor() %>%
as.matrix(),
col = rev(RColorBrewer::brewer.pal(n = 8, name = "RdBu")),
main = "Sample similarity",
fontsize = 9.23,
fontsize_col = 12,
fontsize_row = 12)
listplots<-list()
listplots[[1]]<-sampleDis
listplots[[2]]<-sampleCor
return(listplots)
}
library(RColorBrewer)
# Sample distance heatmap
#'@description This function is created to show variable dissimilarity/similarity in a heatmap using distance or correlation as method.
#'@param expression Numerical matrix with samples as columns (e.g gene expression)
#'@return It returns a heatmap plot showing  dissimilarity/similarity between the samples
#'@import tidyverse
#'@import pheatmap
#'@import RColorBrewer
#'@example
#'
plot_SampleDistance<-function(expression,...){
## calculate distance(Dissimilarity Measure )
sampleDis <- pheatmap::pheatmap(expression %>%
t() %>%
dist() %>%
as.matrix(),
col = rev(RColorBrewer::brewer.pal(n = 8, name = "RdBu")),
main = "Sample dissmilarity",
fontsize = 9.23,
fontsize_col = 12,
fontsize_row = 12)
## calculate sample correlation(Similarity Measure )
sampleCor <- pheatmap::pheatmap(expression %>%
cor() %>%
as.matrix(),
col = rev(RColorBrewer::brewer.pal(n = 8, name = "RdBu")),
main = "Sample similarity",
fontsize = 9.23,
fontsize_col = 12,
fontsize_row = 12)
listplots<-list()
listplots[[1]]<-sampleDis
listplots[[2]]<-sampleCor
return(listplots)
}
# generated with the help of rnorm()
set.seed(78)
m  <- matrix(rnorm(100) , nrow = 20)
rownames(m) <-  paste0(rep("gene",20))
colnames(m) <- c("S1","S2","S3", "S4","S5")
group <- colnames(m)
sampleDis(m)
plot_SampleDistance(m)
plot_MDS(m, point.size = 5)
RColorBrewer::brewer.pal.info[brewer.pal.info$category == 'qual',]
RColorBrewer::brewer.pal.info$category
RColorBrewer::brewer.pal.info
RColorBrewer::brewer.pal.info$category
RColorBrewer::brewer.pal.info[brewer.pal.info$category == 'qual',]
